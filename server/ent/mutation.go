// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"homework-backend/ent/answer"
	"homework-backend/ent/opt"
	"homework-backend/ent/predicate"
	"homework-backend/ent/question"
	"sync"

	"github.com/google/uuid"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAnswer   = "Answer"
	TypeOpt      = "Opt"
	TypeQuestion = "Question"
)

// AnswerMutation represents an operation that mutates the Answer nodes in the graph.
type AnswerMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	question_id   *string
	body          *string
	option_id     *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Answer, error)
	predicates    []predicate.Answer
}

var _ ent.Mutation = (*AnswerMutation)(nil)

// answerOption allows management of the mutation configuration using functional options.
type answerOption func(*AnswerMutation)

// newAnswerMutation creates new mutation for the Answer entity.
func newAnswerMutation(c config, op Op, opts ...answerOption) *AnswerMutation {
	m := &AnswerMutation{
		config:        c,
		op:            op,
		typ:           TypeAnswer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAnswerID sets the ID field of the mutation.
func withAnswerID(id uuid.UUID) answerOption {
	return func(m *AnswerMutation) {
		var (
			err   error
			once  sync.Once
			value *Answer
		)
		m.oldValue = func(ctx context.Context) (*Answer, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Answer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAnswer sets the old Answer of the mutation.
func withAnswer(node *Answer) answerOption {
	return func(m *AnswerMutation) {
		m.oldValue = func(context.Context) (*Answer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AnswerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AnswerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Answer entities.
func (m *AnswerMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AnswerMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetQuestionID sets the "question_id" field.
func (m *AnswerMutation) SetQuestionID(s string) {
	m.question_id = &s
}

// QuestionID returns the value of the "question_id" field in the mutation.
func (m *AnswerMutation) QuestionID() (r string, exists bool) {
	v := m.question_id
	if v == nil {
		return
	}
	return *v, true
}

// OldQuestionID returns the old "question_id" field's value of the Answer entity.
// If the Answer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnswerMutation) OldQuestionID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldQuestionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldQuestionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuestionID: %w", err)
	}
	return oldValue.QuestionID, nil
}

// ResetQuestionID resets all changes to the "question_id" field.
func (m *AnswerMutation) ResetQuestionID() {
	m.question_id = nil
}

// SetBody sets the "body" field.
func (m *AnswerMutation) SetBody(s string) {
	m.body = &s
}

// Body returns the value of the "body" field in the mutation.
func (m *AnswerMutation) Body() (r string, exists bool) {
	v := m.body
	if v == nil {
		return
	}
	return *v, true
}

// OldBody returns the old "body" field's value of the Answer entity.
// If the Answer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnswerMutation) OldBody(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBody is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBody requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBody: %w", err)
	}
	return oldValue.Body, nil
}

// ClearBody clears the value of the "body" field.
func (m *AnswerMutation) ClearBody() {
	m.body = nil
	m.clearedFields[answer.FieldBody] = struct{}{}
}

// BodyCleared returns if the "body" field was cleared in this mutation.
func (m *AnswerMutation) BodyCleared() bool {
	_, ok := m.clearedFields[answer.FieldBody]
	return ok
}

// ResetBody resets all changes to the "body" field.
func (m *AnswerMutation) ResetBody() {
	m.body = nil
	delete(m.clearedFields, answer.FieldBody)
}

// SetOptionID sets the "option_id" field.
func (m *AnswerMutation) SetOptionID(s string) {
	m.option_id = &s
}

// OptionID returns the value of the "option_id" field in the mutation.
func (m *AnswerMutation) OptionID() (r string, exists bool) {
	v := m.option_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOptionID returns the old "option_id" field's value of the Answer entity.
// If the Answer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnswerMutation) OldOptionID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOptionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOptionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOptionID: %w", err)
	}
	return oldValue.OptionID, nil
}

// ClearOptionID clears the value of the "option_id" field.
func (m *AnswerMutation) ClearOptionID() {
	m.option_id = nil
	m.clearedFields[answer.FieldOptionID] = struct{}{}
}

// OptionIDCleared returns if the "option_id" field was cleared in this mutation.
func (m *AnswerMutation) OptionIDCleared() bool {
	_, ok := m.clearedFields[answer.FieldOptionID]
	return ok
}

// ResetOptionID resets all changes to the "option_id" field.
func (m *AnswerMutation) ResetOptionID() {
	m.option_id = nil
	delete(m.clearedFields, answer.FieldOptionID)
}

// Where appends a list predicates to the AnswerMutation builder.
func (m *AnswerMutation) Where(ps ...predicate.Answer) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AnswerMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Answer).
func (m *AnswerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AnswerMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.question_id != nil {
		fields = append(fields, answer.FieldQuestionID)
	}
	if m.body != nil {
		fields = append(fields, answer.FieldBody)
	}
	if m.option_id != nil {
		fields = append(fields, answer.FieldOptionID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AnswerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case answer.FieldQuestionID:
		return m.QuestionID()
	case answer.FieldBody:
		return m.Body()
	case answer.FieldOptionID:
		return m.OptionID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AnswerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case answer.FieldQuestionID:
		return m.OldQuestionID(ctx)
	case answer.FieldBody:
		return m.OldBody(ctx)
	case answer.FieldOptionID:
		return m.OldOptionID(ctx)
	}
	return nil, fmt.Errorf("unknown Answer field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AnswerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case answer.FieldQuestionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuestionID(v)
		return nil
	case answer.FieldBody:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBody(v)
		return nil
	case answer.FieldOptionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOptionID(v)
		return nil
	}
	return fmt.Errorf("unknown Answer field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AnswerMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AnswerMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AnswerMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Answer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AnswerMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(answer.FieldBody) {
		fields = append(fields, answer.FieldBody)
	}
	if m.FieldCleared(answer.FieldOptionID) {
		fields = append(fields, answer.FieldOptionID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AnswerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AnswerMutation) ClearField(name string) error {
	switch name {
	case answer.FieldBody:
		m.ClearBody()
		return nil
	case answer.FieldOptionID:
		m.ClearOptionID()
		return nil
	}
	return fmt.Errorf("unknown Answer nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AnswerMutation) ResetField(name string) error {
	switch name {
	case answer.FieldQuestionID:
		m.ResetQuestionID()
		return nil
	case answer.FieldBody:
		m.ResetBody()
		return nil
	case answer.FieldOptionID:
		m.ResetOptionID()
		return nil
	}
	return fmt.Errorf("unknown Answer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AnswerMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AnswerMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AnswerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AnswerMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AnswerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AnswerMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AnswerMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Answer unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AnswerMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Answer edge %s", name)
}

// OptMutation represents an operation that mutates the Opt nodes in the graph.
type OptMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	body            *string
	weight          *float64
	addweight       *float64
	clearedFields   map[string]struct{}
	question        map[uuid.UUID]struct{}
	removedquestion map[uuid.UUID]struct{}
	clearedquestion bool
	done            bool
	oldValue        func(context.Context) (*Opt, error)
	predicates      []predicate.Opt
}

var _ ent.Mutation = (*OptMutation)(nil)

// optOption allows management of the mutation configuration using functional options.
type optOption func(*OptMutation)

// newOptMutation creates new mutation for the Opt entity.
func newOptMutation(c config, op Op, opts ...optOption) *OptMutation {
	m := &OptMutation{
		config:        c,
		op:            op,
		typ:           TypeOpt,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOptID sets the ID field of the mutation.
func withOptID(id uuid.UUID) optOption {
	return func(m *OptMutation) {
		var (
			err   error
			once  sync.Once
			value *Opt
		)
		m.oldValue = func(ctx context.Context) (*Opt, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Opt.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOpt sets the old Opt of the mutation.
func withOpt(node *Opt) optOption {
	return func(m *OptMutation) {
		m.oldValue = func(context.Context) (*Opt, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OptMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OptMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Opt entities.
func (m *OptMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OptMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetBody sets the "body" field.
func (m *OptMutation) SetBody(s string) {
	m.body = &s
}

// Body returns the value of the "body" field in the mutation.
func (m *OptMutation) Body() (r string, exists bool) {
	v := m.body
	if v == nil {
		return
	}
	return *v, true
}

// OldBody returns the old "body" field's value of the Opt entity.
// If the Opt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OptMutation) OldBody(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBody is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBody requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBody: %w", err)
	}
	return oldValue.Body, nil
}

// ResetBody resets all changes to the "body" field.
func (m *OptMutation) ResetBody() {
	m.body = nil
}

// SetWeight sets the "weight" field.
func (m *OptMutation) SetWeight(f float64) {
	m.weight = &f
	m.addweight = nil
}

// Weight returns the value of the "weight" field in the mutation.
func (m *OptMutation) Weight() (r float64, exists bool) {
	v := m.weight
	if v == nil {
		return
	}
	return *v, true
}

// OldWeight returns the old "weight" field's value of the Opt entity.
// If the Opt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OptMutation) OldWeight(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldWeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldWeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWeight: %w", err)
	}
	return oldValue.Weight, nil
}

// AddWeight adds f to the "weight" field.
func (m *OptMutation) AddWeight(f float64) {
	if m.addweight != nil {
		*m.addweight += f
	} else {
		m.addweight = &f
	}
}

// AddedWeight returns the value that was added to the "weight" field in this mutation.
func (m *OptMutation) AddedWeight() (r float64, exists bool) {
	v := m.addweight
	if v == nil {
		return
	}
	return *v, true
}

// ResetWeight resets all changes to the "weight" field.
func (m *OptMutation) ResetWeight() {
	m.weight = nil
	m.addweight = nil
}

// AddQuestionIDs adds the "question" edge to the Question entity by ids.
func (m *OptMutation) AddQuestionIDs(ids ...uuid.UUID) {
	if m.question == nil {
		m.question = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.question[ids[i]] = struct{}{}
	}
}

// ClearQuestion clears the "question" edge to the Question entity.
func (m *OptMutation) ClearQuestion() {
	m.clearedquestion = true
}

// QuestionCleared reports if the "question" edge to the Question entity was cleared.
func (m *OptMutation) QuestionCleared() bool {
	return m.clearedquestion
}

// RemoveQuestionIDs removes the "question" edge to the Question entity by IDs.
func (m *OptMutation) RemoveQuestionIDs(ids ...uuid.UUID) {
	if m.removedquestion == nil {
		m.removedquestion = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.question, ids[i])
		m.removedquestion[ids[i]] = struct{}{}
	}
}

// RemovedQuestion returns the removed IDs of the "question" edge to the Question entity.
func (m *OptMutation) RemovedQuestionIDs() (ids []uuid.UUID) {
	for id := range m.removedquestion {
		ids = append(ids, id)
	}
	return
}

// QuestionIDs returns the "question" edge IDs in the mutation.
func (m *OptMutation) QuestionIDs() (ids []uuid.UUID) {
	for id := range m.question {
		ids = append(ids, id)
	}
	return
}

// ResetQuestion resets all changes to the "question" edge.
func (m *OptMutation) ResetQuestion() {
	m.question = nil
	m.clearedquestion = false
	m.removedquestion = nil
}

// Where appends a list predicates to the OptMutation builder.
func (m *OptMutation) Where(ps ...predicate.Opt) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *OptMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Opt).
func (m *OptMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OptMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.body != nil {
		fields = append(fields, opt.FieldBody)
	}
	if m.weight != nil {
		fields = append(fields, opt.FieldWeight)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OptMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case opt.FieldBody:
		return m.Body()
	case opt.FieldWeight:
		return m.Weight()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OptMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case opt.FieldBody:
		return m.OldBody(ctx)
	case opt.FieldWeight:
		return m.OldWeight(ctx)
	}
	return nil, fmt.Errorf("unknown Opt field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OptMutation) SetField(name string, value ent.Value) error {
	switch name {
	case opt.FieldBody:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBody(v)
		return nil
	case opt.FieldWeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWeight(v)
		return nil
	}
	return fmt.Errorf("unknown Opt field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OptMutation) AddedFields() []string {
	var fields []string
	if m.addweight != nil {
		fields = append(fields, opt.FieldWeight)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OptMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case opt.FieldWeight:
		return m.AddedWeight()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OptMutation) AddField(name string, value ent.Value) error {
	switch name {
	case opt.FieldWeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWeight(v)
		return nil
	}
	return fmt.Errorf("unknown Opt numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OptMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OptMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OptMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Opt nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OptMutation) ResetField(name string) error {
	switch name {
	case opt.FieldBody:
		m.ResetBody()
		return nil
	case opt.FieldWeight:
		m.ResetWeight()
		return nil
	}
	return fmt.Errorf("unknown Opt field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OptMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.question != nil {
		edges = append(edges, opt.EdgeQuestion)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OptMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case opt.EdgeQuestion:
		ids := make([]ent.Value, 0, len(m.question))
		for id := range m.question {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OptMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedquestion != nil {
		edges = append(edges, opt.EdgeQuestion)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OptMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case opt.EdgeQuestion:
		ids := make([]ent.Value, 0, len(m.removedquestion))
		for id := range m.removedquestion {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OptMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedquestion {
		edges = append(edges, opt.EdgeQuestion)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OptMutation) EdgeCleared(name string) bool {
	switch name {
	case opt.EdgeQuestion:
		return m.clearedquestion
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OptMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Opt unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OptMutation) ResetEdge(name string) error {
	switch name {
	case opt.EdgeQuestion:
		m.ResetQuestion()
		return nil
	}
	return fmt.Errorf("unknown Opt edge %s", name)
}

// QuestionMutation represents an operation that mutates the Question nodes in the graph.
type QuestionMutation struct {
	config
	op             Op
	typ            string
	id             *uuid.UUID
	weight         *float64
	addweight      *float64
	_type          *string
	body           *string
	clearedFields  map[string]struct{}
	options        map[uuid.UUID]struct{}
	removedoptions map[uuid.UUID]struct{}
	clearedoptions bool
	done           bool
	oldValue       func(context.Context) (*Question, error)
	predicates     []predicate.Question
}

var _ ent.Mutation = (*QuestionMutation)(nil)

// questionOption allows management of the mutation configuration using functional options.
type questionOption func(*QuestionMutation)

// newQuestionMutation creates new mutation for the Question entity.
func newQuestionMutation(c config, op Op, opts ...questionOption) *QuestionMutation {
	m := &QuestionMutation{
		config:        c,
		op:            op,
		typ:           TypeQuestion,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withQuestionID sets the ID field of the mutation.
func withQuestionID(id uuid.UUID) questionOption {
	return func(m *QuestionMutation) {
		var (
			err   error
			once  sync.Once
			value *Question
		)
		m.oldValue = func(ctx context.Context) (*Question, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Question.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withQuestion sets the old Question of the mutation.
func withQuestion(node *Question) questionOption {
	return func(m *QuestionMutation) {
		m.oldValue = func(context.Context) (*Question, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m QuestionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m QuestionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Question entities.
func (m *QuestionMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *QuestionMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetWeight sets the "weight" field.
func (m *QuestionMutation) SetWeight(f float64) {
	m.weight = &f
	m.addweight = nil
}

// Weight returns the value of the "weight" field in the mutation.
func (m *QuestionMutation) Weight() (r float64, exists bool) {
	v := m.weight
	if v == nil {
		return
	}
	return *v, true
}

// OldWeight returns the old "weight" field's value of the Question entity.
// If the Question object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionMutation) OldWeight(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldWeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldWeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWeight: %w", err)
	}
	return oldValue.Weight, nil
}

// AddWeight adds f to the "weight" field.
func (m *QuestionMutation) AddWeight(f float64) {
	if m.addweight != nil {
		*m.addweight += f
	} else {
		m.addweight = &f
	}
}

// AddedWeight returns the value that was added to the "weight" field in this mutation.
func (m *QuestionMutation) AddedWeight() (r float64, exists bool) {
	v := m.addweight
	if v == nil {
		return
	}
	return *v, true
}

// ResetWeight resets all changes to the "weight" field.
func (m *QuestionMutation) ResetWeight() {
	m.weight = nil
	m.addweight = nil
}

// SetType sets the "type" field.
func (m *QuestionMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *QuestionMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Question entity.
// If the Question object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *QuestionMutation) ResetType() {
	m._type = nil
}

// SetBody sets the "body" field.
func (m *QuestionMutation) SetBody(s string) {
	m.body = &s
}

// Body returns the value of the "body" field in the mutation.
func (m *QuestionMutation) Body() (r string, exists bool) {
	v := m.body
	if v == nil {
		return
	}
	return *v, true
}

// OldBody returns the old "body" field's value of the Question entity.
// If the Question object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionMutation) OldBody(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBody is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBody requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBody: %w", err)
	}
	return oldValue.Body, nil
}

// ClearBody clears the value of the "body" field.
func (m *QuestionMutation) ClearBody() {
	m.body = nil
	m.clearedFields[question.FieldBody] = struct{}{}
}

// BodyCleared returns if the "body" field was cleared in this mutation.
func (m *QuestionMutation) BodyCleared() bool {
	_, ok := m.clearedFields[question.FieldBody]
	return ok
}

// ResetBody resets all changes to the "body" field.
func (m *QuestionMutation) ResetBody() {
	m.body = nil
	delete(m.clearedFields, question.FieldBody)
}

// AddOptionIDs adds the "options" edge to the Opt entity by ids.
func (m *QuestionMutation) AddOptionIDs(ids ...uuid.UUID) {
	if m.options == nil {
		m.options = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.options[ids[i]] = struct{}{}
	}
}

// ClearOptions clears the "options" edge to the Opt entity.
func (m *QuestionMutation) ClearOptions() {
	m.clearedoptions = true
}

// OptionsCleared reports if the "options" edge to the Opt entity was cleared.
func (m *QuestionMutation) OptionsCleared() bool {
	return m.clearedoptions
}

// RemoveOptionIDs removes the "options" edge to the Opt entity by IDs.
func (m *QuestionMutation) RemoveOptionIDs(ids ...uuid.UUID) {
	if m.removedoptions == nil {
		m.removedoptions = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.options, ids[i])
		m.removedoptions[ids[i]] = struct{}{}
	}
}

// RemovedOptions returns the removed IDs of the "options" edge to the Opt entity.
func (m *QuestionMutation) RemovedOptionsIDs() (ids []uuid.UUID) {
	for id := range m.removedoptions {
		ids = append(ids, id)
	}
	return
}

// OptionsIDs returns the "options" edge IDs in the mutation.
func (m *QuestionMutation) OptionsIDs() (ids []uuid.UUID) {
	for id := range m.options {
		ids = append(ids, id)
	}
	return
}

// ResetOptions resets all changes to the "options" edge.
func (m *QuestionMutation) ResetOptions() {
	m.options = nil
	m.clearedoptions = false
	m.removedoptions = nil
}

// Where appends a list predicates to the QuestionMutation builder.
func (m *QuestionMutation) Where(ps ...predicate.Question) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *QuestionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Question).
func (m *QuestionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *QuestionMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.weight != nil {
		fields = append(fields, question.FieldWeight)
	}
	if m._type != nil {
		fields = append(fields, question.FieldType)
	}
	if m.body != nil {
		fields = append(fields, question.FieldBody)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *QuestionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case question.FieldWeight:
		return m.Weight()
	case question.FieldType:
		return m.GetType()
	case question.FieldBody:
		return m.Body()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *QuestionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case question.FieldWeight:
		return m.OldWeight(ctx)
	case question.FieldType:
		return m.OldType(ctx)
	case question.FieldBody:
		return m.OldBody(ctx)
	}
	return nil, fmt.Errorf("unknown Question field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QuestionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case question.FieldWeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWeight(v)
		return nil
	case question.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case question.FieldBody:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBody(v)
		return nil
	}
	return fmt.Errorf("unknown Question field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *QuestionMutation) AddedFields() []string {
	var fields []string
	if m.addweight != nil {
		fields = append(fields, question.FieldWeight)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *QuestionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case question.FieldWeight:
		return m.AddedWeight()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QuestionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case question.FieldWeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWeight(v)
		return nil
	}
	return fmt.Errorf("unknown Question numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *QuestionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(question.FieldBody) {
		fields = append(fields, question.FieldBody)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *QuestionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *QuestionMutation) ClearField(name string) error {
	switch name {
	case question.FieldBody:
		m.ClearBody()
		return nil
	}
	return fmt.Errorf("unknown Question nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *QuestionMutation) ResetField(name string) error {
	switch name {
	case question.FieldWeight:
		m.ResetWeight()
		return nil
	case question.FieldType:
		m.ResetType()
		return nil
	case question.FieldBody:
		m.ResetBody()
		return nil
	}
	return fmt.Errorf("unknown Question field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *QuestionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.options != nil {
		edges = append(edges, question.EdgeOptions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *QuestionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case question.EdgeOptions:
		ids := make([]ent.Value, 0, len(m.options))
		for id := range m.options {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *QuestionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedoptions != nil {
		edges = append(edges, question.EdgeOptions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *QuestionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case question.EdgeOptions:
		ids := make([]ent.Value, 0, len(m.removedoptions))
		for id := range m.removedoptions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *QuestionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedoptions {
		edges = append(edges, question.EdgeOptions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *QuestionMutation) EdgeCleared(name string) bool {
	switch name {
	case question.EdgeOptions:
		return m.clearedoptions
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *QuestionMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Question unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *QuestionMutation) ResetEdge(name string) error {
	switch name {
	case question.EdgeOptions:
		m.ResetOptions()
		return nil
	}
	return fmt.Errorf("unknown Question edge %s", name)
}
