// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"homework-backend/ent/opt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Opt is the model entity for the Opt schema.
type Opt struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Body holds the value of the "body" field.
	Body string `json:"body,omitempty"`
	// Weight holds the value of the "weight" field.
	Weight float64 `json:"weight,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OptQuery when eager-loading is set.
	Edges OptEdges `json:"edges"`
}

// OptEdges holds the relations/edges for other nodes in the graph.
type OptEdges struct {
	// Question holds the value of the question edge.
	Question []*Question `json:"question,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// QuestionOrErr returns the Question value or an error if the edge
// was not loaded in eager-loading.
func (e OptEdges) QuestionOrErr() ([]*Question, error) {
	if e.loadedTypes[0] {
		return e.Question, nil
	}
	return nil, &NotLoadedError{edge: "question"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Opt) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case opt.FieldWeight:
			values[i] = new(sql.NullFloat64)
		case opt.FieldBody:
			values[i] = new(sql.NullString)
		case opt.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Opt", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Opt fields.
func (o *Opt) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case opt.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				o.ID = *value
			}
		case opt.FieldBody:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field body", values[i])
			} else if value.Valid {
				o.Body = value.String
			}
		case opt.FieldWeight:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field weight", values[i])
			} else if value.Valid {
				o.Weight = value.Float64
			}
		}
	}
	return nil
}

// QueryQuestion queries the "question" edge of the Opt entity.
func (o *Opt) QueryQuestion() *QuestionQuery {
	return (&OptClient{config: o.config}).QueryQuestion(o)
}

// Update returns a builder for updating this Opt.
// Note that you need to call Opt.Unwrap() before calling this method if this Opt
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Opt) Update() *OptUpdateOne {
	return (&OptClient{config: o.config}).UpdateOne(o)
}

// Unwrap unwraps the Opt entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Opt) Unwrap() *Opt {
	tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Opt is not a transactional entity")
	}
	o.config.driver = tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Opt) String() string {
	var builder strings.Builder
	builder.WriteString("Opt(")
	builder.WriteString(fmt.Sprintf("id=%v", o.ID))
	builder.WriteString(", body=")
	builder.WriteString(o.Body)
	builder.WriteString(", weight=")
	builder.WriteString(fmt.Sprintf("%v", o.Weight))
	builder.WriteByte(')')
	return builder.String()
}

// Opts is a parsable slice of Opt.
type Opts []*Opt

func (o Opts) config(cfg config) {
	for _i := range o {
		o[_i].config = cfg
	}
}
