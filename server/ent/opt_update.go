// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"homework-backend/ent/opt"
	"homework-backend/ent/predicate"
	"homework-backend/ent/question"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// OptUpdate is the builder for updating Opt entities.
type OptUpdate struct {
	config
	hooks    []Hook
	mutation *OptMutation
}

// Where appends a list predicates to the OptUpdate builder.
func (ou *OptUpdate) Where(ps ...predicate.Opt) *OptUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetBody sets the "body" field.
func (ou *OptUpdate) SetBody(s string) *OptUpdate {
	ou.mutation.SetBody(s)
	return ou
}

// SetWeight sets the "weight" field.
func (ou *OptUpdate) SetWeight(f float64) *OptUpdate {
	ou.mutation.ResetWeight()
	ou.mutation.SetWeight(f)
	return ou
}

// AddWeight adds f to the "weight" field.
func (ou *OptUpdate) AddWeight(f float64) *OptUpdate {
	ou.mutation.AddWeight(f)
	return ou
}

// AddQuestionIDs adds the "question" edge to the Question entity by IDs.
func (ou *OptUpdate) AddQuestionIDs(ids ...uuid.UUID) *OptUpdate {
	ou.mutation.AddQuestionIDs(ids...)
	return ou
}

// AddQuestion adds the "question" edges to the Question entity.
func (ou *OptUpdate) AddQuestion(q ...*Question) *OptUpdate {
	ids := make([]uuid.UUID, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return ou.AddQuestionIDs(ids...)
}

// Mutation returns the OptMutation object of the builder.
func (ou *OptUpdate) Mutation() *OptMutation {
	return ou.mutation
}

// ClearQuestion clears all "question" edges to the Question entity.
func (ou *OptUpdate) ClearQuestion() *OptUpdate {
	ou.mutation.ClearQuestion()
	return ou
}

// RemoveQuestionIDs removes the "question" edge to Question entities by IDs.
func (ou *OptUpdate) RemoveQuestionIDs(ids ...uuid.UUID) *OptUpdate {
	ou.mutation.RemoveQuestionIDs(ids...)
	return ou
}

// RemoveQuestion removes "question" edges to Question entities.
func (ou *OptUpdate) RemoveQuestion(q ...*Question) *OptUpdate {
	ids := make([]uuid.UUID, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return ou.RemoveQuestionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OptUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ou.hooks) == 0 {
		affected, err = ou.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OptMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ou.mutation = mutation
			affected, err = ou.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ou.hooks) - 1; i >= 0; i-- {
			if ou.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ou.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ou.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OptUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OptUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OptUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ou *OptUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   opt.Table,
			Columns: opt.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: opt.FieldID,
			},
		},
	}
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.Body(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: opt.FieldBody,
		})
	}
	if value, ok := ou.mutation.Weight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: opt.FieldWeight,
		})
	}
	if value, ok := ou.mutation.AddedWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: opt.FieldWeight,
		})
	}
	if ou.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   opt.QuestionTable,
			Columns: opt.QuestionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: question.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedQuestionIDs(); len(nodes) > 0 && !ou.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   opt.QuestionTable,
			Columns: opt.QuestionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: question.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   opt.QuestionTable,
			Columns: opt.QuestionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: question.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{opt.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// OptUpdateOne is the builder for updating a single Opt entity.
type OptUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OptMutation
}

// SetBody sets the "body" field.
func (ouo *OptUpdateOne) SetBody(s string) *OptUpdateOne {
	ouo.mutation.SetBody(s)
	return ouo
}

// SetWeight sets the "weight" field.
func (ouo *OptUpdateOne) SetWeight(f float64) *OptUpdateOne {
	ouo.mutation.ResetWeight()
	ouo.mutation.SetWeight(f)
	return ouo
}

// AddWeight adds f to the "weight" field.
func (ouo *OptUpdateOne) AddWeight(f float64) *OptUpdateOne {
	ouo.mutation.AddWeight(f)
	return ouo
}

// AddQuestionIDs adds the "question" edge to the Question entity by IDs.
func (ouo *OptUpdateOne) AddQuestionIDs(ids ...uuid.UUID) *OptUpdateOne {
	ouo.mutation.AddQuestionIDs(ids...)
	return ouo
}

// AddQuestion adds the "question" edges to the Question entity.
func (ouo *OptUpdateOne) AddQuestion(q ...*Question) *OptUpdateOne {
	ids := make([]uuid.UUID, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return ouo.AddQuestionIDs(ids...)
}

// Mutation returns the OptMutation object of the builder.
func (ouo *OptUpdateOne) Mutation() *OptMutation {
	return ouo.mutation
}

// ClearQuestion clears all "question" edges to the Question entity.
func (ouo *OptUpdateOne) ClearQuestion() *OptUpdateOne {
	ouo.mutation.ClearQuestion()
	return ouo
}

// RemoveQuestionIDs removes the "question" edge to Question entities by IDs.
func (ouo *OptUpdateOne) RemoveQuestionIDs(ids ...uuid.UUID) *OptUpdateOne {
	ouo.mutation.RemoveQuestionIDs(ids...)
	return ouo
}

// RemoveQuestion removes "question" edges to Question entities.
func (ouo *OptUpdateOne) RemoveQuestion(q ...*Question) *OptUpdateOne {
	ids := make([]uuid.UUID, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return ouo.RemoveQuestionIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OptUpdateOne) Select(field string, fields ...string) *OptUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Opt entity.
func (ouo *OptUpdateOne) Save(ctx context.Context) (*Opt, error) {
	var (
		err  error
		node *Opt
	)
	if len(ouo.hooks) == 0 {
		node, err = ouo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OptMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ouo.mutation = mutation
			node, err = ouo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ouo.hooks) - 1; i >= 0; i-- {
			if ouo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ouo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ouo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OptUpdateOne) SaveX(ctx context.Context) *Opt {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OptUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OptUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ouo *OptUpdateOne) sqlSave(ctx context.Context) (_node *Opt, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   opt.Table,
			Columns: opt.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: opt.FieldID,
			},
		},
	}
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Opt.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, opt.FieldID)
		for _, f := range fields {
			if !opt.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != opt.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.Body(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: opt.FieldBody,
		})
	}
	if value, ok := ouo.mutation.Weight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: opt.FieldWeight,
		})
	}
	if value, ok := ouo.mutation.AddedWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: opt.FieldWeight,
		})
	}
	if ouo.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   opt.QuestionTable,
			Columns: opt.QuestionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: question.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedQuestionIDs(); len(nodes) > 0 && !ouo.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   opt.QuestionTable,
			Columns: opt.QuestionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: question.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   opt.QuestionTable,
			Columns: opt.QuestionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: question.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Opt{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{opt.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
