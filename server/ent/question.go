// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"homework-backend/ent/question"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Question is the model entity for the Question schema.
type Question struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Weight holds the value of the "weight" field.
	Weight float64 `json:"weight,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Body holds the value of the "body" field.
	Body *string `json:"body,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the QuestionQuery when eager-loading is set.
	Edges QuestionEdges `json:"edges"`
}

// QuestionEdges holds the relations/edges for other nodes in the graph.
type QuestionEdges struct {
	// Options holds the value of the options edge.
	Options []*Opt `json:"options,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OptionsOrErr returns the Options value or an error if the edge
// was not loaded in eager-loading.
func (e QuestionEdges) OptionsOrErr() ([]*Opt, error) {
	if e.loadedTypes[0] {
		return e.Options, nil
	}
	return nil, &NotLoadedError{edge: "options"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Question) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case question.FieldWeight:
			values[i] = new(sql.NullFloat64)
		case question.FieldType, question.FieldBody:
			values[i] = new(sql.NullString)
		case question.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Question", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Question fields.
func (q *Question) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case question.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				q.ID = *value
			}
		case question.FieldWeight:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field weight", values[i])
			} else if value.Valid {
				q.Weight = value.Float64
			}
		case question.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				q.Type = value.String
			}
		case question.FieldBody:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field body", values[i])
			} else if value.Valid {
				q.Body = new(string)
				*q.Body = value.String
			}
		}
	}
	return nil
}

// QueryOptions queries the "options" edge of the Question entity.
func (q *Question) QueryOptions() *OptQuery {
	return (&QuestionClient{config: q.config}).QueryOptions(q)
}

// Update returns a builder for updating this Question.
// Note that you need to call Question.Unwrap() before calling this method if this Question
// was returned from a transaction, and the transaction was committed or rolled back.
func (q *Question) Update() *QuestionUpdateOne {
	return (&QuestionClient{config: q.config}).UpdateOne(q)
}

// Unwrap unwraps the Question entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (q *Question) Unwrap() *Question {
	tx, ok := q.config.driver.(*txDriver)
	if !ok {
		panic("ent: Question is not a transactional entity")
	}
	q.config.driver = tx.drv
	return q
}

// String implements the fmt.Stringer.
func (q *Question) String() string {
	var builder strings.Builder
	builder.WriteString("Question(")
	builder.WriteString(fmt.Sprintf("id=%v", q.ID))
	builder.WriteString(", weight=")
	builder.WriteString(fmt.Sprintf("%v", q.Weight))
	builder.WriteString(", type=")
	builder.WriteString(q.Type)
	if v := q.Body; v != nil {
		builder.WriteString(", body=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// Questions is a parsable slice of Question.
type Questions []*Question

func (q Questions) config(cfg config) {
	for _i := range q {
		q[_i].config = cfg
	}
}
